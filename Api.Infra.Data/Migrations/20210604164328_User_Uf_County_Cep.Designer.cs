// <auto-generated />
using System;
using Api.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210604164328_User_Uf_County_Cep")]
    partial class User_Uf_County_Cep
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Api.Domain.Entities.CepEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("CountyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cep")
                        .IsUnique();

                    b.HasIndex("CountyId");

                    b.ToTable("Ceps");
                });

            modelBuilder.Entity("Api.Domain.Entities.CountyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CodeIBGE")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("UfId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CodeIBGE")
                        .IsUnique();

                    b.HasIndex("UfId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Api.Domain.Entities.UfEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Initials")
                        .IsUnique();

                    b.ToTable("Ufs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f05c57d-c8af-406d-9703-f44a81b30a5b"),
                            CreateAt = new DateTime(2021, 6, 4, 16, 43, 27, 883, DateTimeKind.Utc).AddTicks(9520),
                            Initials = "AC",
                            Name = "Acre",
                            UpdateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(1384)
                        },
                        new
                        {
                            Id = new Guid("e515bef8-d36f-44eb-91a8-5dc31d31fc6e"),
                            CreateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2228),
                            Initials = "SP",
                            Name = "São Paulo",
                            UpdateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2247)
                        },
                        new
                        {
                            Id = new Guid("dbbb5b5a-4be3-4bf3-8bb1-da40065cf20d"),
                            CreateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2263),
                            Initials = "RJ",
                            Name = "Rio de Janeiro",
                            UpdateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2265)
                        },
                        new
                        {
                            Id = new Guid("e1299ddc-d20f-41b0-b745-1e6838451fbd"),
                            CreateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2270),
                            Initials = "MG",
                            Name = "Minas Gerais",
                            UpdateAt = new DateTime(2021, 6, 4, 16, 43, 27, 884, DateTimeKind.Utc).AddTicks(2271)
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Api.Domain.Entities.CepEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.CountyEntity", "County")
                        .WithMany("Ceps")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("Api.Domain.Entities.CountyEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.UfEntity", "Uf")
                        .WithMany("Counties")
                        .HasForeignKey("UfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("Api.Domain.Entities.CountyEntity", b =>
                {
                    b.Navigation("Ceps");
                });

            modelBuilder.Entity("Api.Domain.Entities.UfEntity", b =>
                {
                    b.Navigation("Counties");
                });
#pragma warning restore 612, 618
        }
    }
}
